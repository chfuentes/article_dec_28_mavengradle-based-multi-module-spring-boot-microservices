name: MiPipeline
on:
  push:
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
      - name: Configuracion de JDK
        uses: actions/setup-java@v3.12.0
        with:
          java-version: '11'
          distribution: 'zulu' # Alternative distribution options are available
          
      - name: Compilar
        run: |
          chmod +x gradlew
          ./gradlew build bootBuildImage

     # - name: Testear Path
     #   run: |
     #       ls -lt 
     #       ls -lt $GITHUB_WORKSPACE/
     
     # - name: Verificar creacion compilado JAR
     #  run: |
     #       ls -lt 
     #       ls -lt $GITHUB_WORKSPACE/build
     #       ls -lt $GITHUB_WORKSPACE/service-a/build/libs
     #       ls -lt $GITHUB_WORKSPACE/service-b/build/libs
     #       ls -lt $GITHUB_WORKSPACE/service-c/build/libs
            
      - name: Init compilado para pruebas
        run: |
          java -jar $GITHUB_WORKSPACE/service-a/build/libs/service-a-0.0.1-SNAPSHOT.jar &
          java -jar $GITHUB_WORKSPACE/service-b/build/libs/service-b-0.0.1-SNAPSHOT.jar &
          java -jar $GITHUB_WORKSPACE/service-c/build/libs/service-c-0.0.1-SNAPSHOT.jar &
          
      # Dormir +5 para asegurar que levanten los servers
      - name: Wait / Sleep
        uses: jakejarvis/wait-action@v0.1.1
        with:
          time: 8s

      #- name: Verificar creacion compilado Docker
        #run: #docker images 
        
      #- name: Cachear SonarCloud packages
      #  uses: actions/cache@v3
      #  with:
      #    path: ~/.sonar/cache
      #    key: ${{ runner.os }}-sonar
      #    restore-keys: ${{ runner.os }}-sonar
          
      #- name: Cachear Gradle packages
      #  uses: actions/cache@v3
      #  with:
      #    path: ~/.gradle/caches
      #    key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      #    restore-keys: ${{ runner.os }}-gradle

      #- name: Prueba compilado JAR
      #  run: |
      #    curl 127.0.0.1:8081/greeting || true
      #    curl 127.0.0.1:8082/greeting || true
      #    curl 127.0.0.1:8083/greeting || true

      # Pruebas con Jmeter
      - name: Apache JMeter
        uses: rbhadti94/apache-jmeter-action@v0.7.0
        with:
          testFilePath: 'jmetertest.jmx'
          outputReportsFolder: 'jmreport'

      - name: PerfAction for JMeter
        # You may pin to the exact commit or the version.
        # uses: QAInsights/PerfAction@f3959d0a69e7f23949add25d7e34a3ae167d6443
        uses: QAInsights/PerfAction@v3.1
        with:
          # jmeter test plan to execute
          test-plan-path: 'jmetertest.jmx'
          # Optional arguments. For more details https://jmeter.apache.org/usermanual/get-started.html#non_gui
          #args: # optional

    # Jmeter
      - name: instalar jmeter
        run: |
          java -version
          wget https://downloads.apache.org//jmeter/binaries/apache-jmeter-5.5.zip
          unzip apache-jmeter-5.5.zip
          cd apache-jmeter-5.5/bin
          ./jmeter -v
          pwd
          chmod +x $GITHUB_WORKSPACE/test_report
      - name: instalar plugins
        run: |
          cd $GITHUB_WORKSPACE/apache-jmeter-5.5
          wget -q --no-check-certificate https://jmeter-plugins.org/files/packages/jpgc-dummy-0.4.zip  -P .
          unzip -o jpgc-dummy-0.4.zip  && rm jpgc-dummy-0.4.zip
      - name: Ejecutar scripts jmx 
        run: |
         cd $GITHUB_WORKSPACE
         for i in $( ls -A1 *.jmx); do
            cd $GITHUB_WORKSPACE/apache-jmeter-5.5/bin
            mkdir $GITHUB_WORKSPACE/test_report/${i%.jmx}
            ./jmeter -n -t $GITHUB_WORKSPACE/$i  -l $GITHUB_WORKSPACE/${i%.jmx}.jtl -e -o $GITHUB_WORKSPACE/test_report/${i%.jmx}
         done
         
      - name: mover jtl
        run: |
          ls
          mv *.jtl $GITHUB_WORKSPACE/test_report
      # Dejar disponible resultados al finalizar
      - name: Upload JMeter Test Results
        uses: actions/upload-artifact@v2.2.4
        with:
         name: test_results
         path: test_report
         
      # Dejar artifact con resultados de JMeter en Action
      #- uses: actions/upload-artifact@v1
      #  with:
      #    name: jmeter-test-results
      #    path: jmreport/

      # Pruebas con Postman
      #- name: Postman
      #  uses: matt-ball/newman-action@master
      #  with:
      #    collection: 'Postman.json'
      #    #export-globals: 'test_report/results.json'
      #    reporters: '["json"]'

      # Dejar artifact con resultados de Postman en Action
      #- uses: actions/upload-artifact@v1
      #  with:
      #    name: postman-test-results
      #    path: newman/
          
      #- name: Compilar y Analizar con Sonar
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #  run: |
      #    chmod +x gradlew
      #    ./gradlew build sonar --info
          
      #- name: Docker Hub Login
      #  uses: docker/login-action@v2.2.0
      #  with: 
      #    username: ${{ secrets.DOCKER_USERNAME }}
      #    password: ${{ secrets.DOCKER_PASSWORD }}
      
     # - name: Deploy de docker
     #   run: |
     #     docker tag 7d820823f33c chfuentesu/spring-multi-module-service-service-a
     #     docker tag c46339799598 chfuentesu/spring-multi-module-service-service-b
     #     docker tag 61e555bbcb7b chfuentesu/spring-multi-module-service-service-c
     #     docker push chfuentesu/spring-multi-module-service-service-a
     #     docker push chfuentesu/spring-multi-module-service-service-b
     #     docker push chfuentesu/spring-multi-module-service-service-c      
